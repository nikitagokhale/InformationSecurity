import java.util.*;

public class Assignment1
{ 
	class graphNode
	{
		LinkedList<Integer> edges = new LinkedList<Integer>();
		int vertex;
	}
	ArrayList<Integer> result = new ArrayList<Integer>();
	LinkedList<graphNode> graph = new LinkedList<graphNode>();
	PriorityQueue<Integer> queue = new PriorityQueue<Integer>();
	Stack<Integer> stack = new Stack<Integer>();
	int noVertices;
	
	void createObj()
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the no of vertices:- ");
		noVertices = sc.nextInt();
		for(int i=0;i<noVertices;i++)
		{
			graphNode temp = new graphNode();
			System.out.print("\nEnter the vertex:- ");
			temp.vertex = sc.nextInt();
			System.out.print("Enter the no of adjacent edges:- ");
			int noEdges = sc.nextInt();
			if(noEdges != 0)
				System.out.println("Enter the edges adjacent to vertex " + temp.vertex + ":- ");
			for(int j=0;j<noEdges;j++)
			{
				System.out.print(">");
				temp.edges.add(sc.nextInt());
			}
			graph.add(temp);
		}
		sc.close();
	}
	
	void display()
	{
		for(int i=0;i<noVertices;i++)
		{
			System.out.print(graph.get(i).vertex);
			for(int j=0;j<graph.get(i).edges.size();j++)
				System.out.print(" --> " + graph.get(i).edges.get(j));
			System.out.println();
		}
	}
	
	void BFS()
	{
		queue.add(graph.get(0).vertex);
		while(queue.peek() != null)
		{
			int currVertex = queue.remove();
			result.add(currVertex);
			int index = searchGraph(currVertex);
			for(int i=0;i)
		}
	}
	
	int searchGraph(int currVertex)
	{
		for(int i=0;i<noVertices;i++)
		{
			if(graph.get(i).vertex == currVertex)
				return i;
		}
		return -1;
	}
	
	public static void main(String[] args)
	{
		Assignment1 obj = new Assignment1();
		obj.createObj();
		System.out.println("\nDisplaying the graph:- ");
		obj.display();
		System.out.println("\nBFS traversal:- ");
		obj.BFS();
	}
}
