import java.util.*;

public class Assignment1
{
	ArrayList<graphNode> graph = new ArrayList<graphNode>();
	
	
	class graphNode
	{
		int vertex;
		ArrayList<Integer> edges = new ArrayList<Integer>();
	}
	
	void createGraph()
	{
		int noVertices;
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the no. of vertices:- ");
		noVertices = sc.nextInt();
		for(int i=0;i<noVertices;i++)
		{
			graphNode temp = new graphNode();
			System.out.print("\nEnter the vertex:- ");
			temp.vertex = sc.nextInt();
			System.out.print("Enter the no. of edges adjacent to vertex " + temp.vertex + ":-");
			int noEdges = sc.nextInt();
			System.out.println("Enter the edges:- ");
			for(int j=0;j<noEdges;j++)
			{
				System.out.print(">");
				temp.edges.add(sc.nextInt());
			}
			graph.add(temp);
		}
		sc.close();
	}
	
	void printGraph()
	{
		System.out.println("\nPrinting the graph...");
		for(int i=0;i<graph.size();i++)
		{
			System.out.print(graph.get(i).vertex);
			for(int j=0;j<graph.get(i).edges.size();j++)
				System.out.print(" --> " + graph.get(i).edges.get(j));
			System.out.println();
		}
	}
	
	void BFS()
	{
		System.out.println("\nBFS traversal...");
		ArrayList<Integer> queue = new ArrayList<Integer>();
		ArrayList<Integer> result = new ArrayList<Integer>();
		queue.add(graph.get(0).vertex);
		while(!queue.isEmpty())
		{
			int currVertex = queue.remove(0);
			result.add(currVertex);
			graphNode temp = searchGraph(currVertex);
			for(int j=0;j<temp.edges.size();j++)
			{
				if(!result.contains(temp.edges.get(j)) && !queue.contains(temp.edges.get(j)))
					queue.add(temp.edges.get(j));
			}
		}
		System.out.print(result);
	}
	
	void DFS()
	{
		System.out.println("\n\nDFS traversal...");
		Stack<Integer> stack = new Stack<Integer>();
		ArrayList<Integer> result = new ArrayList<Integer>();
		stack.push(graph.get(0).vertex);
		result.add(graph.get(0).vertex);
		while(!stack.empty())
		{
			int currVertex = stack.peek();
			graphNode temp = searchGraph(currVertex);
			boolean backtracking = true;
			for(int j=0;j<temp.edges.size();j++)
			{
				if(!stack.contains(temp.edges.get(j)) && !result.contains(temp.edges.get(j)))
				{
					stack.push(temp.edges.get(j));
					result.add(stack.peek());
					backtracking = false;
					break;
				}
			}
			
			if(backtracking)
				stack.pop();
		}
		System.out.println(result);
	}
	
	graphNode searchGraph(int currVertex)
	{
		graphNode temp = new graphNode();
		for(int i=0;i<graph.size();i++)
		{
			if(graph.get(i).vertex == currVertex)
			{
				temp = graph.get(i);
				break;
			}
		}
		return temp;
	}
	
	public static void main(String[] args)
	{
		Assignment1 obj = new Assignment1();
		obj.createGraph();
		obj.printGraph();
		obj.BFS();
		obj.DFS();
	}
}
